#!/bin/tcsh
#$ -S /bin/tcsh
source ./code/code.main/custom-tcshrc    # customize shell environment

##
## USAGE: scripts-submit-job-array JOBLIST-FILE [MAX-JOBS]
##

if ($#argv < 1) then
  grep '^##' $0
  exit
endif

set job_file = $1
set max_jobs = $2

set n_jobs = `cat $job_file | wc -l`
if ($max_jobs == "") set max_jobs = $n_jobs

if ($n_jobs > 0) then

  # create run directory (all job info will be stored here)
  set run_dir = `readlink -f $job_file | sed 's/\/[^/]\+$//'`/../.run
  if (-e $run_dir) then
    echo "ERROR: run directory $run_dir already exists. Check if jobs are currently running." | scripts-send2err
    exit
  endif
  mkdir $run_dir

  # determine computational resourses
  set n_cpu = `head -1 $job_file | cut -d' ' -f2 | cut -d',' -f1`
  if ("$n_cpu" == "") set n_cpu = 1
  set mem = `head -1 $job_file | cut -d' ' -f2 | sed 's/$/,,/' | cut -d',' -f2`
  if ("$mem" == "") set mem = 10G
  set rtime = `head -1 $job_file | cut -d' ' -f2 | sed 's/$/,,/' | cut -d',' -f3`
  if ("$rtime" == "") set rtime = 24
  set jobname = `pwd | sed 's/.*[/]//'`
  
  # split job file into separate files to be run individually
  cat $job_file | cut -d' ' -f3- | split -l 1 - $run_dir/temp_job_

  # create output directories for each job
  set id = 1
  foreach tmp_job ($run_dir/temp_job_*)
    set outdir = `cat $tmp_job | cut -d' ' -f2`
    if (-e $outdir) then
	  echo "Output directory $outdir already exists, skipping..." | scripts-send2err
	else
      mkdir -p $outdir
	  cat $tmp_job >! $run_dir/job_$id
      chmod +x $run_dir/job_$id
	  @ id ++
    endif
  end
  rm -f $run_dir/temp_job_*
  
  # create script to run job array
  set run = $run_dir/run.sh
  (                                                                         \
  echo '#\!/bin/tcsh'                                                     ; \
  echo '#'SBATCH -J $jobname                                              ; \
  echo '#'SBATCH -o $run_dir/out_job_%a.out                                   ; \
  echo '#'SBATCH -e $run_dir/out_job_%a.err                                   ; \
  echo '#'SBATCH --array=1-$n_jobs%$max_jobs                              ; \
  echo '#'SBATCH --time=0-${rtime}:00:00                                  ; \
  echo '#'SBATCH --ntasks=1                                               ; \
  echo '#'SBATCH --cpus-per-task=$n_cpu                                   ; \
  echo '#'SBATCH --mem=$mem                                               ; \
  echo                                                                    ; \
  echo "set script = $run_dir"'/job_${SLURM_ARRAY_TASK_ID}'               ; \
  echo '$script'                                                          ; \
  echo                                                                      \
  ) >! $run
  chmod +x $run

  # submit job array
  scripts-send2err "Submitting job array..."
  set jid = `sbatch $run | tr ' ' '\n' | tail -1`
  scripts-send2err "Waiting for job array [$jid] to complete..."
  scripts-qsub-wait "$jid"

  # distribute input/output files into the output directories
  foreach job (`cd $run_dir; ls -1 job_*`)
    set outdir = `cat $run_dir/$job | cut -d' ' -f2`
	cp $run_dir/$job $outdir/job.sh
	echo $jid >! $outdir/job.id
	cp $run_dir/out_$job.out $outdir/job.out
	cp $run_dir/out_$job.err $outdir/job.err
  end
  
  # cleanup
#  rm -rf $run_dir
endif

scripts-send2err "Done."



